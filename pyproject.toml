[tool.poetry]
name = "proglib"
version = "0.1.0"
description = ""
authors = ["korchizhinskiy <korchizhinskiy@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
pydantic = "^2.5.3"
pydantic-settings = "^2.1.0"
fastapi = "^0.109.0"
uvicorn = "^0.26.0"
sqlalchemy = "^2.0.25"
uuid7 = "^0.1.0"

[tool.poetry.group.dev.dependencies]
ruff = "^0.1.14"
pyright = "^1.1.347"
ipython = "^8.20.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 120
target-version = "py312"

select = [
 "F", # Pyflakes 
 "E", # Pycodestyle | Error
 "W", # Pycodestyle | Warning
 "C90", # Mccabe 
 "I", # Isort
 "N", # Pep8 naming
 "D", # Pydocstyle
 "UP", # Pyupgrade
 "YTT", # flake8-2020
 "ANN", # flake8-annotations
 "ASYNC", # flake8-async
 "S", # flake8-bandit
 "BLE", # flake8-blind-except
 "FBT", # flake8-boolean-trap
 "B", # flake8-bugbear
 "A", # flake8-builtins
 "COM", # flake8-commas
 "CPY", # flake8-copyright
 "C4", # flake8-comprehensions
 "DTZ", # flake8-datetimez
 "T10", # flake8-debugger
 "DJ", # flake8-django
 "EM", # flake8-errmsg
 "EXE", # flake8-executable
 "FA", # flake8-future-annotations
 "ISC", # flake8-implicit-str-concat
 "ICN", # flake8-import-conventions
 "G", # flake8-logging-format
 "INP", # flake8-no-pep420
 "PIE", # flake8-pie
 "T20", # flake8-print
 "PYI", # flake8-pyi
 "PT", # flake8-pytest-style
 "Q", # flake8-quotes 
 "RSE", # flake8-raise
 "RET", # flake8-return
 "SLF", # flake8-self
 "SLOT", # flake8-slots
 "SIM", # flake8-simplify
 "TID", # flake8-tidy-imports
 "TCH", # flake8-type-checking
 "INT", # flake8-gettext
 "ARG", # flake8-unused-arguments
 "PTH", # flake8-use-pathlib
 "TD", # flake8-todos
 "FIX", # flake8-fixme
 "ERA", # eradicate
 "PD", # pandas-vet
 "PGH", # pygrep-hooks
 "PL", # Pylint
 "TRY", # tryceratops
 "FLY", # flynt
 "NPY", # NumPy-specific rules
 "AIR", # Airflow
 "PERF", # Perflint
 "FURB", # refurb
 "LOG", # flake8-logging
 "RUF", # Ruff-specific rules
]

fixable = ["ALL"]

ignore = [
  "D100", # Missing docstring in public module
  "D101", # Missing docstring in public class
  "D102", # Missing docstring in public method
  "D103", # Missing docstring in public function
  "D104", # Missing docstring in public package
  "D105", # Missing docstring in magic method
  "D106", # Missing docstring in public nested class  
  "D107", # Missing docstring in __init__
  "ANN101", # Missing type annotation for `self` in method
  "D202", # No blank lines allowed after function docstring (found 1)
  "D203", # 1 blank line required before class docstring
  "D212", # Multi-line docstring summary should start at the first line
  "ANN002", # Missing type annotation for `*args`
  "ANN003", # Missing type annotation for `**kwargs`
  "ANN101", # Missing type annotation for `self` in method
  "ANN102", # Missing type annotation for `cls` in classmethod
  "FIX002", # Line contains TODO, consider resolving the issue
  "TD003", # Missing issue link on the line following this TODO
  "RUF001", # String contains ambiguous
  "RUF002", # String contains ambiguous
  "RUF003", # String contains ambiguous
  "W293", # Blank line contains whitespace
  "G004", # Logging statement uses f-string
  "COM812", # Trailing comma missing
  ]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations",
]
[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pyright]
venv = ".venv"
venvPath = "."
include = [
    "app",
]
exclude = [
    "**/migrations",
    "**/__pycache__",
]
defineConstant = { DEBUG = true }

reportMissingImports = true
reportMissingTypeStubs = false
reportIncompatibleVariableOverride = "none"
reportIncompatibleMethodOverride = "none"
reportPrivateUsage = "error"

pythonVersion = "3.12.1"
pythonPlatform = "Linux"
